{"ast":null,"code":"var _jsxFileName = \"/Users/kirilldikalin/work/moscow_streets/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { DISTRICTS } from './data/districts';\nimport YandexMap from './components/YandexMap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = '302af765-6c16-4994-992f-ec50c7f8746c';\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  padding: 20px;\n`;\n_c = AppContainer;\nconst Header = styled.header`\n  margin-bottom: 20px;\n`;\n_c2 = Header;\nconst MainContent = styled.main`\n  display: flex;\n  flex: 1;\n  gap: 20px;\n`;\n_c3 = MainContent;\nconst Sidebar = styled.div`\n  width: 300px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n_c4 = Sidebar;\nconst MapContainer = styled.div`\n  flex: 1;\n  min-height: 500px;\n  border: 1px solid #ccc;\n`;\n_c5 = MapContainer;\nconst Input = styled.input`\n  width: 100%;\n  padding: 10px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n`;\n_c6 = Input;\nconst ProgressSection = styled.div`\n  margin-top: 20px;\n`;\n_c7 = ProgressSection;\nconst ProgressBar = styled.div`\n  width: 100%;\n  height: 20px;\n  background-color: #f0f0f0;\n  border-radius: 10px;\n  overflow: hidden;\n  margin-bottom: 10px;\n\n  &::after {\n    content: '';\n    display: block;\n    width: ${props => props.progress}%;\n    height: 100%;\n    background-color: #4CAF50;\n    transition: width 0.3s ease;\n  }\n`;\n_c8 = ProgressBar;\nconst Button = styled.button`\n  padding: 10px 20px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  margin-top: 10px;\n\n  &:hover {\n    background-color: #45a049;\n  }\n`;\n_c9 = Button;\nfunction App() {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [learnedStreets, setLearnedStreets] = useState([]);\n  const [progress, setProgress] = useState({});\n  const [streets, setStreets] = useState([]); // [{name, district, coordinates}]\n\n  useEffect(() => {\n    const savedProgress = localStorage.getItem('learnedStreets');\n    if (savedProgress) setLearnedStreets(JSON.parse(savedProgress));\n    // Можно загрузить streets из localStorage, если нужно\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('learnedStreets', JSON.stringify(learnedStreets));\n    const newProgress = {};\n    DISTRICTS.forEach(district => {\n      const districtStreets = streets.filter(street => street.district === district.name);\n      const totalStreets = districtStreets.length;\n      const learnedInDistrict = districtStreets.filter(street => learnedStreets.includes(street.name)).length;\n      newProgress[district.name] = totalStreets > 0 ? learnedInDistrict / totalStreets * 100 : 0;\n    });\n    setProgress(newProgress);\n  }, [learnedStreets, streets]);\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  // Получение координат улицы через API Яндекса\n  const fetchStreetCoords = async streetName => {\n    const url = `https://geocode-maps.yandex.ru/1.x/?apikey=${API_KEY}&geocode=Москва,${encodeURIComponent(streetName)}&format=json&results=1`;\n    const res = await fetch(url);\n    const data = await res.json();\n    try {\n      const geoObject = data.response.GeoObjectCollection.featureMember[0].GeoObject;\n      // Пробуем получить LineString (если есть)\n      if (geoObject.geometry && geoObject.geometry.GeometryCollection) {\n        const line = geoObject.geometry.GeometryCollection.geometries.find(g => g.type === 'LineString');\n        if (line) {\n          // ВНИМАНИЕ: Яндекс возвращает [lon, lat], а нам нужен [lat, lon]\n          const coords = line.coordinates.map(c => [parseFloat(c[1]), parseFloat(c[0])]);\n          console.log('LineString coords:', coords);\n          return coords;\n        }\n      }\n      // Если нет LineString, используем точку\n      const pos = geoObject.Point.pos.split(' ');\n      const coords = [[parseFloat(pos[1]), parseFloat(pos[0])], [parseFloat(pos[1]), parseFloat(pos[0])]];\n      console.log('Point coords:', coords);\n      return coords;\n    } catch (e) {\n      console.log('Ошибка получения координат:', e);\n      return [];\n    }\n  };\n  const handleInputSubmit = async e => {\n    e.preventDefault();\n    const normalizedInput = inputValue.trim().toLowerCase();\n    // Проверяем, есть ли уже такая улица\n    let foundStreet = streets.find(street => street.name.toLowerCase() === normalizedInput);\n    if (!foundStreet) {\n      // Получаем координаты через API\n      const coords = await fetchStreetCoords(inputValue.trim());\n      if (coords.length === 0) {\n        toast.error('Не удалось получить координаты улицы');\n        setInputValue('');\n        return;\n      }\n      // Определяем район (по DISTRICTS)\n      let district = '';\n      for (const d of DISTRICTS) {\n        if (d.name && inputValue.match(new RegExp(d.name, 'i'))) {\n          district = d.name;\n          break;\n        }\n      }\n      // Если не нашли район — не добавляем\n      if (!district) {\n        toast.error('Не удалось определить район улицы');\n        setInputValue('');\n        return;\n      }\n      foundStreet = {\n        name: inputValue.trim(),\n        district,\n        coordinates: coords\n      };\n      setStreets(prev => [...prev, foundStreet]);\n    }\n    if (!learnedStreets.includes(foundStreet.name)) {\n      setLearnedStreets([...learnedStreets, foundStreet.name]);\n      toast.success(`Поздравляем! Вы выучили улицу ${foundStreet.name}`);\n    } else {\n      toast.info('Эта улица уже изучена');\n    }\n    setInputValue('');\n  };\n  const handleClearProgress = () => {\n    if (window.confirm('Вы уверены, что хотите сбросить весь прогресс?')) {\n      setLearnedStreets([]);\n      toast.info('Прогресс сброшен');\n    }\n  };\n  const handleExportProgress = () => {\n    const data = JSON.stringify(learnedStreets);\n    const blob = new Blob([data], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'moscow-streets-progress.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n  const handleImportProgress = e => {\n    var _e$target$files;\n    const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = event => {\n        try {\n          var _event$target;\n          const importedStreets = JSON.parse((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);\n          if (Array.isArray(importedStreets)) {\n            setLearnedStreets(importedStreets);\n            toast.success('Прогресс успешно импортирован');\n          } else {\n            throw new Error('Неверный формат файла');\n          }\n        } catch (error) {\n          toast.error('Ошибка при импорте файла');\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0418\\u0437\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435 \\u0443\\u043B\\u0438\\u0446 \\u0426\\u0410\\u041E \\u041C\\u043E\\u0441\\u043A\\u0432\\u044B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainContent, {\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleInputSubmit,\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            value: inputValue,\n            onChange: handleInputChange,\n            placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0443\\u043B\\u0438\\u0446\\u044B...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ProgressSection, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\u041F\\u0440\\u043E\\u0433\\u0440\\u0435\\u0441\\u0441 \\u043F\\u043E \\u0440\\u0430\\u0439\\u043E\\u043D\\u0430\\u043C:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), DISTRICTS.map(district => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: district.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n              progress: progress[district.name] || 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this)]\n          }, district.name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClearProgress,\n            children: \"\\u041E\\u0447\\u0438\\u0441\\u0442\\u0438\\u0442\\u044C \\u043F\\u0440\\u043E\\u0433\\u0440\\u0435\\u0441\\u0441\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleExportProgress,\n            children: \"\\u042D\\u043A\\u0441\\u043F\\u043E\\u0440\\u0442 \\u043F\\u0440\\u043E\\u0433\\u0440\\u0435\\u0441\\u0441\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".json\",\n            onChange: handleImportProgress,\n            style: {\n              display: 'none'\n            },\n            id: \"import-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              var _document$getElementB;\n              return (_document$getElementB = document.getElementById('import-input')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.click();\n            },\n            children: \"\\u0418\\u043C\\u043F\\u043E\\u0440\\u0442 \\u043F\\u0440\\u043E\\u0433\\u0440\\u0435\\u0441\\u0441\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n        children: /*#__PURE__*/_jsxDEV(YandexMap, {\n          streets: streets,\n          learnedStreets: learnedStreets\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5Up0BezQMx22cVRr0CzYzooIMN4=\");\n_c0 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"MainContent\");\n$RefreshReg$(_c4, \"Sidebar\");\n$RefreshReg$(_c5, \"MapContainer\");\n$RefreshReg$(_c6, \"Input\");\n$RefreshReg$(_c7, \"ProgressSection\");\n$RefreshReg$(_c8, \"ProgressBar\");\n$RefreshReg$(_c9, \"Button\");\n$RefreshReg$(_c0, \"App\");","map":{"version":3,"names":["React","useState","useEffect","styled","ToastContainer","toast","DISTRICTS","YandexMap","jsxDEV","_jsxDEV","API_KEY","AppContainer","div","_c","Header","header","_c2","MainContent","main","_c3","Sidebar","_c4","MapContainer","_c5","Input","input","_c6","ProgressSection","_c7","ProgressBar","props","progress","_c8","Button","button","_c9","App","_s","inputValue","setInputValue","learnedStreets","setLearnedStreets","setProgress","streets","setStreets","savedProgress","localStorage","getItem","JSON","parse","setItem","stringify","newProgress","forEach","district","districtStreets","filter","street","name","totalStreets","length","learnedInDistrict","includes","handleInputChange","e","target","value","fetchStreetCoords","streetName","url","encodeURIComponent","res","fetch","data","json","geoObject","response","GeoObjectCollection","featureMember","GeoObject","geometry","GeometryCollection","line","geometries","find","g","type","coords","coordinates","map","c","parseFloat","console","log","pos","Point","split","handleInputSubmit","preventDefault","normalizedInput","trim","toLowerCase","foundStreet","error","d","match","RegExp","prev","success","info","handleClearProgress","window","confirm","handleExportProgress","blob","Blob","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","handleImportProgress","_e$target$files","file","files","reader","FileReader","onload","event","_event$target","importedStreets","result","Array","isArray","Error","readAsText","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","placeholder","onClick","accept","style","display","id","_document$getElementB","getElementById","_c0","$RefreshReg$"],"sources":["/Users/kirilldikalin/work/moscow_streets/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { DISTRICTS } from './data/districts';\nimport { STREETS } from './data/streets';\nimport YandexMap from './components/YandexMap';\n\nconst API_KEY = '302af765-6c16-4994-992f-ec50c7f8746c';\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  padding: 20px;\n`;\n\nconst Header = styled.header`\n  margin-bottom: 20px;\n`;\n\nconst MainContent = styled.main`\n  display: flex;\n  flex: 1;\n  gap: 20px;\n`;\n\nconst Sidebar = styled.div`\n  width: 300px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst MapContainer = styled.div`\n  flex: 1;\n  min-height: 500px;\n  border: 1px solid #ccc;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 10px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n`;\n\nconst ProgressSection = styled.div`\n  margin-top: 20px;\n`;\n\nconst ProgressBar = styled.div<{ progress: number }>`\n  width: 100%;\n  height: 20px;\n  background-color: #f0f0f0;\n  border-radius: 10px;\n  overflow: hidden;\n  margin-bottom: 10px;\n\n  &::after {\n    content: '';\n    display: block;\n    width: ${props => props.progress}%;\n    height: 100%;\n    background-color: #4CAF50;\n    transition: width 0.3s ease;\n  }\n`;\n\nconst Button = styled.button`\n  padding: 10px 20px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  margin-top: 10px;\n\n  &:hover {\n    background-color: #45a049;\n  }\n`;\n\nfunction App() {\n  const [inputValue, setInputValue] = useState('');\n  const [learnedStreets, setLearnedStreets] = useState<string[]>([]);\n  const [progress, setProgress] = useState<Record<string, number>>({});\n  const [streets, setStreets] = useState<any[]>([]); // [{name, district, coordinates}]\n\n  useEffect(() => {\n    const savedProgress = localStorage.getItem('learnedStreets');\n    if (savedProgress) setLearnedStreets(JSON.parse(savedProgress));\n    // Можно загрузить streets из localStorage, если нужно\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('learnedStreets', JSON.stringify(learnedStreets));\n    const newProgress: Record<string, number> = {};\n    DISTRICTS.forEach(district => {\n      const districtStreets = streets.filter(street => street.district === district.name);\n      const totalStreets = districtStreets.length;\n      const learnedInDistrict = districtStreets.filter(street => learnedStreets.includes(street.name)).length;\n      newProgress[district.name] = totalStreets > 0 ? (learnedInDistrict / totalStreets) * 100 : 0;\n    });\n    setProgress(newProgress);\n  }, [learnedStreets, streets]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  // Получение координат улицы через API Яндекса\n  const fetchStreetCoords = async (streetName: string) => {\n    const url = `https://geocode-maps.yandex.ru/1.x/?apikey=${API_KEY}&geocode=Москва,${encodeURIComponent(streetName)}&format=json&results=1`;\n    const res = await fetch(url);\n    const data = await res.json();\n    try {\n      const geoObject = data.response.GeoObjectCollection.featureMember[0].GeoObject;\n      // Пробуем получить LineString (если есть)\n      if (geoObject.geometry && geoObject.geometry.GeometryCollection) {\n        const line = geoObject.geometry.GeometryCollection.geometries.find((g: any) => g.type === 'LineString');\n        if (line) {\n          // ВНИМАНИЕ: Яндекс возвращает [lon, lat], а нам нужен [lat, lon]\n          const coords = line.coordinates.map((c: any) => [parseFloat(c[1]), parseFloat(c[0])]);\n          console.log('LineString coords:', coords);\n          return coords;\n        }\n      }\n      // Если нет LineString, используем точку\n      const pos = geoObject.Point.pos.split(' ');\n      const coords = [[parseFloat(pos[1]), parseFloat(pos[0])], [parseFloat(pos[1]), parseFloat(pos[0])]];\n      console.log('Point coords:', coords);\n      return coords;\n    } catch (e) {\n      console.log('Ошибка получения координат:', e);\n      return [];\n    }\n  };\n\n  const handleInputSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const normalizedInput = inputValue.trim().toLowerCase();\n    // Проверяем, есть ли уже такая улица\n    let foundStreet = streets.find(street => street.name.toLowerCase() === normalizedInput);\n    if (!foundStreet) {\n      // Получаем координаты через API\n      const coords = await fetchStreetCoords(inputValue.trim());\n      if (coords.length === 0) {\n        toast.error('Не удалось получить координаты улицы');\n        setInputValue('');\n        return;\n      }\n      // Определяем район (по DISTRICTS)\n      let district = '';\n      for (const d of DISTRICTS) {\n        if (d.name && inputValue.match(new RegExp(d.name, 'i'))) {\n          district = d.name;\n          break;\n        }\n      }\n      // Если не нашли район — не добавляем\n      if (!district) {\n        toast.error('Не удалось определить район улицы');\n        setInputValue('');\n        return;\n      }\n      foundStreet = { name: inputValue.trim(), district, coordinates: coords };\n      setStreets(prev => [...prev, foundStreet]);\n    }\n    if (!learnedStreets.includes(foundStreet.name)) {\n      setLearnedStreets([...learnedStreets, foundStreet.name]);\n      toast.success(`Поздравляем! Вы выучили улицу ${foundStreet.name}`);\n    } else {\n      toast.info('Эта улица уже изучена');\n    }\n    setInputValue('');\n  };\n\n  const handleClearProgress = () => {\n    if (window.confirm('Вы уверены, что хотите сбросить весь прогресс?')) {\n      setLearnedStreets([]);\n      toast.info('Прогресс сброшен');\n    }\n  };\n\n  const handleExportProgress = () => {\n    const data = JSON.stringify(learnedStreets);\n    const blob = new Blob([data], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'moscow-streets-progress.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const handleImportProgress = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        try {\n          const importedStreets = JSON.parse(event.target?.result as string);\n          if (Array.isArray(importedStreets)) {\n            setLearnedStreets(importedStreets);\n            toast.success('Прогресс успешно импортирован');\n          } else {\n            throw new Error('Неверный формат файла');\n          }\n        } catch (error) {\n          toast.error('Ошибка при импорте файла');\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  return (\n    <AppContainer>\n      <ToastContainer />\n      <Header>\n        <h1>Изучение улиц ЦАО Москвы</h1>\n      </Header>\n      \n      <MainContent>\n        <Sidebar>\n          <form onSubmit={handleInputSubmit}>\n            <Input\n              type=\"text\"\n              value={inputValue}\n              onChange={handleInputChange}\n              placeholder=\"Введите название улицы...\"\n            />\n          </form>\n\n          <ProgressSection>\n            <h3>Прогресс по районам:</h3>\n            {DISTRICTS.map(district => (\n              <div key={district.name}>\n                <p>{district.name}</p>\n                <ProgressBar progress={progress[district.name] || 0} />\n              </div>\n            ))}\n          </ProgressSection>\n\n          <div>\n            <Button onClick={handleClearProgress}>Очистить прогресс</Button>\n            <Button onClick={handleExportProgress}>Экспорт прогресса</Button>\n            <input\n              type=\"file\"\n              accept=\".json\"\n              onChange={handleImportProgress}\n              style={{ display: 'none' }}\n              id=\"import-input\"\n            />\n            <Button onClick={() => document.getElementById('import-input')?.click()}>\n              Импорт прогресса\n            </Button>\n          </div>\n        </Sidebar>\n\n        <MapContainer>\n          <YandexMap \n            streets={streets}\n            learnedStreets={learnedStreets}\n          />\n        </MapContainer>\n      </MainContent>\n    </AppContainer>\n  );\n}\n\nexport default App; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,cAAc,EAAEC,KAAK,QAAQ,gBAAgB;AACtD,OAAO,uCAAuC;AAC9C,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,OAAO,GAAG,sCAAsC;AAEtD,MAAMC,YAAY,GAAGR,MAAM,CAACS,GAAG;AAC/B;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GALIF,YAAY;AAOlB,MAAMG,MAAM,GAAGX,MAAM,CAACY,MAAM;AAC5B;AACA,CAAC;AAACC,GAAA,GAFIF,MAAM;AAIZ,MAAMG,WAAW,GAAGd,MAAM,CAACe,IAAI;AAC/B;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAJIF,WAAW;AAMjB,MAAMG,OAAO,GAAGjB,MAAM,CAACS,GAAG;AAC1B;AACA;AACA;AACA;AACA,CAAC;AAACS,GAAA,GALID,OAAO;AAOb,MAAME,YAAY,GAAGnB,MAAM,CAACS,GAAG;AAC/B;AACA;AACA;AACA,CAAC;AAACW,GAAA,GAJID,YAAY;AAMlB,MAAME,KAAK,GAAGrB,MAAM,CAACsB,KAAK;AAC1B;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GANIF,KAAK;AAQX,MAAMG,eAAe,GAAGxB,MAAM,CAACS,GAAG;AAClC;AACA,CAAC;AAACgB,GAAA,GAFID,eAAe;AAIrB,MAAME,WAAW,GAAG1B,MAAM,CAACS,GAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAakB,KAAK,IAAIA,KAAK,CAACC,QAAQ;AACpC;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAhBIH,WAAW;AAkBjB,MAAMI,MAAM,GAAG9B,MAAM,CAAC+B,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAZIF,MAAM;AAcZ,SAASG,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGtC,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACuC,cAAc,EAAEC,iBAAiB,CAAC,GAAGxC,QAAQ,CAAW,EAAE,CAAC;EAClE,MAAM,CAAC8B,QAAQ,EAAEW,WAAW,CAAC,GAAGzC,QAAQ,CAAyB,CAAC,CAAC,CAAC;EACpE,MAAM,CAAC0C,OAAO,EAAEC,UAAU,CAAC,GAAG3C,QAAQ,CAAQ,EAAE,CAAC,CAAC,CAAC;;EAEnDC,SAAS,CAAC,MAAM;IACd,MAAM2C,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;IAC5D,IAAIF,aAAa,EAAEJ,iBAAiB,CAACO,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC,CAAC;IAC/D;EACF,CAAC,EAAE,EAAE,CAAC;EAEN3C,SAAS,CAAC,MAAM;IACd4C,YAAY,CAACI,OAAO,CAAC,gBAAgB,EAAEF,IAAI,CAACG,SAAS,CAACX,cAAc,CAAC,CAAC;IACtE,MAAMY,WAAmC,GAAG,CAAC,CAAC;IAC9C9C,SAAS,CAAC+C,OAAO,CAACC,QAAQ,IAAI;MAC5B,MAAMC,eAAe,GAAGZ,OAAO,CAACa,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACH,QAAQ,KAAKA,QAAQ,CAACI,IAAI,CAAC;MACnF,MAAMC,YAAY,GAAGJ,eAAe,CAACK,MAAM;MAC3C,MAAMC,iBAAiB,GAAGN,eAAe,CAACC,MAAM,CAACC,MAAM,IAAIjB,cAAc,CAACsB,QAAQ,CAACL,MAAM,CAACC,IAAI,CAAC,CAAC,CAACE,MAAM;MACvGR,WAAW,CAACE,QAAQ,CAACI,IAAI,CAAC,GAAGC,YAAY,GAAG,CAAC,GAAIE,iBAAiB,GAAGF,YAAY,GAAI,GAAG,GAAG,CAAC;IAC9F,CAAC,CAAC;IACFjB,WAAW,CAACU,WAAW,CAAC;EAC1B,CAAC,EAAE,CAACZ,cAAc,EAAEG,OAAO,CAAC,CAAC;EAE7B,MAAMoB,iBAAiB,GAAIC,CAAsC,IAAK;IACpEzB,aAAa,CAACyB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC/B,CAAC;;EAED;EACA,MAAMC,iBAAiB,GAAG,MAAOC,UAAkB,IAAK;IACtD,MAAMC,GAAG,GAAG,8CAA8C3D,OAAO,mBAAmB4D,kBAAkB,CAACF,UAAU,CAAC,wBAAwB;IAC1I,MAAMG,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;IAC5B,MAAMI,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;IAC7B,IAAI;MACF,MAAMC,SAAS,GAAGF,IAAI,CAACG,QAAQ,CAACC,mBAAmB,CAACC,aAAa,CAAC,CAAC,CAAC,CAACC,SAAS;MAC9E;MACA,IAAIJ,SAAS,CAACK,QAAQ,IAAIL,SAAS,CAACK,QAAQ,CAACC,kBAAkB,EAAE;QAC/D,MAAMC,IAAI,GAAGP,SAAS,CAACK,QAAQ,CAACC,kBAAkB,CAACE,UAAU,CAACC,IAAI,CAAEC,CAAM,IAAKA,CAAC,CAACC,IAAI,KAAK,YAAY,CAAC;QACvG,IAAIJ,IAAI,EAAE;UACR;UACA,MAAMK,MAAM,GAAGL,IAAI,CAACM,WAAW,CAACC,GAAG,CAAEC,CAAM,IAAK,CAACC,UAAU,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEC,UAAU,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACrFE,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEN,MAAM,CAAC;UACzC,OAAOA,MAAM;QACf;MACF;MACA;MACA,MAAMO,GAAG,GAAGnB,SAAS,CAACoB,KAAK,CAACD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;MAC1C,MAAMT,MAAM,GAAG,CAAC,CAACI,UAAU,CAACG,GAAG,CAAC,CAAC,CAAC,CAAC,EAAEH,UAAU,CAACG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAACH,UAAU,CAACG,GAAG,CAAC,CAAC,CAAC,CAAC,EAAEH,UAAU,CAACG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACnGF,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEN,MAAM,CAAC;MACpC,OAAOA,MAAM;IACf,CAAC,CAAC,OAAOvB,CAAC,EAAE;MACV4B,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE7B,CAAC,CAAC;MAC7C,OAAO,EAAE;IACX;EACF,CAAC;EAED,MAAMiC,iBAAiB,GAAG,MAAOjC,CAAkB,IAAK;IACtDA,CAAC,CAACkC,cAAc,CAAC,CAAC;IAClB,MAAMC,eAAe,GAAG7D,UAAU,CAAC8D,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACvD;IACA,IAAIC,WAAW,GAAG3D,OAAO,CAACyC,IAAI,CAAC3B,MAAM,IAAIA,MAAM,CAACC,IAAI,CAAC2C,WAAW,CAAC,CAAC,KAAKF,eAAe,CAAC;IACvF,IAAI,CAACG,WAAW,EAAE;MAChB;MACA,MAAMf,MAAM,GAAG,MAAMpB,iBAAiB,CAAC7B,UAAU,CAAC8D,IAAI,CAAC,CAAC,CAAC;MACzD,IAAIb,MAAM,CAAC3B,MAAM,KAAK,CAAC,EAAE;QACvBvD,KAAK,CAACkG,KAAK,CAAC,sCAAsC,CAAC;QACnDhE,aAAa,CAAC,EAAE,CAAC;QACjB;MACF;MACA;MACA,IAAIe,QAAQ,GAAG,EAAE;MACjB,KAAK,MAAMkD,CAAC,IAAIlG,SAAS,EAAE;QACzB,IAAIkG,CAAC,CAAC9C,IAAI,IAAIpB,UAAU,CAACmE,KAAK,CAAC,IAAIC,MAAM,CAACF,CAAC,CAAC9C,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE;UACvDJ,QAAQ,GAAGkD,CAAC,CAAC9C,IAAI;UACjB;QACF;MACF;MACA;MACA,IAAI,CAACJ,QAAQ,EAAE;QACbjD,KAAK,CAACkG,KAAK,CAAC,mCAAmC,CAAC;QAChDhE,aAAa,CAAC,EAAE,CAAC;QACjB;MACF;MACA+D,WAAW,GAAG;QAAE5C,IAAI,EAAEpB,UAAU,CAAC8D,IAAI,CAAC,CAAC;QAAE9C,QAAQ;QAAEkC,WAAW,EAAED;MAAO,CAAC;MACxE3C,UAAU,CAAC+D,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEL,WAAW,CAAC,CAAC;IAC5C;IACA,IAAI,CAAC9D,cAAc,CAACsB,QAAQ,CAACwC,WAAW,CAAC5C,IAAI,CAAC,EAAE;MAC9CjB,iBAAiB,CAAC,CAAC,GAAGD,cAAc,EAAE8D,WAAW,CAAC5C,IAAI,CAAC,CAAC;MACxDrD,KAAK,CAACuG,OAAO,CAAC,iCAAiCN,WAAW,CAAC5C,IAAI,EAAE,CAAC;IACpE,CAAC,MAAM;MACLrD,KAAK,CAACwG,IAAI,CAAC,uBAAuB,CAAC;IACrC;IACAtE,aAAa,CAAC,EAAE,CAAC;EACnB,CAAC;EAED,MAAMuE,mBAAmB,GAAGA,CAAA,KAAM;IAChC,IAAIC,MAAM,CAACC,OAAO,CAAC,gDAAgD,CAAC,EAAE;MACpEvE,iBAAiB,CAAC,EAAE,CAAC;MACrBpC,KAAK,CAACwG,IAAI,CAAC,kBAAkB,CAAC;IAChC;EACF,CAAC;EAED,MAAMI,oBAAoB,GAAGA,CAAA,KAAM;IACjC,MAAMxC,IAAI,GAAGzB,IAAI,CAACG,SAAS,CAACX,cAAc,CAAC;IAC3C,MAAM0E,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC1C,IAAI,CAAC,EAAE;MAAEa,IAAI,EAAE;IAAmB,CAAC,CAAC;IAC3D,MAAMjB,GAAG,GAAG+C,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;IACrC,MAAMI,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACrCF,CAAC,CAACG,IAAI,GAAGpD,GAAG;IACZiD,CAAC,CAACI,QAAQ,GAAG,8BAA8B;IAC3CJ,CAAC,CAACK,KAAK,CAAC,CAAC;IACTP,GAAG,CAACQ,eAAe,CAACvD,GAAG,CAAC;EAC1B,CAAC;EAED,MAAMwD,oBAAoB,GAAI7D,CAAsC,IAAK;IAAA,IAAA8D,eAAA;IACvE,MAAMC,IAAI,IAAAD,eAAA,GAAG9D,CAAC,CAACC,MAAM,CAAC+D,KAAK,cAAAF,eAAA,uBAAdA,eAAA,CAAiB,CAAC,CAAC;IAChC,IAAIC,IAAI,EAAE;MACR,MAAME,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;QACzB,IAAI;UAAA,IAAAC,aAAA;UACF,MAAMC,eAAe,GAAGtF,IAAI,CAACC,KAAK,EAAAoF,aAAA,GAACD,KAAK,CAACnE,MAAM,cAAAoE,aAAA,uBAAZA,aAAA,CAAcE,MAAgB,CAAC;UAClE,IAAIC,KAAK,CAACC,OAAO,CAACH,eAAe,CAAC,EAAE;YAClC7F,iBAAiB,CAAC6F,eAAe,CAAC;YAClCjI,KAAK,CAACuG,OAAO,CAAC,+BAA+B,CAAC;UAChD,CAAC,MAAM;YACL,MAAM,IAAI8B,KAAK,CAAC,uBAAuB,CAAC;UAC1C;QACF,CAAC,CAAC,OAAOnC,KAAK,EAAE;UACdlG,KAAK,CAACkG,KAAK,CAAC,0BAA0B,CAAC;QACzC;MACF,CAAC;MACD0B,MAAM,CAACU,UAAU,CAACZ,IAAI,CAAC;IACzB;EACF,CAAC;EAED,oBACEtH,OAAA,CAACE,YAAY;IAAAiI,QAAA,gBACXnI,OAAA,CAACL,cAAc;MAAAyI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClBvI,OAAA,CAACK,MAAM;MAAA8H,QAAA,eACLnI,OAAA;QAAAmI,QAAA,EAAI;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,eAETvI,OAAA,CAACQ,WAAW;MAAA2H,QAAA,gBACVnI,OAAA,CAACW,OAAO;QAAAwH,QAAA,gBACNnI,OAAA;UAAMwI,QAAQ,EAAEhD,iBAAkB;UAAA2C,QAAA,eAChCnI,OAAA,CAACe,KAAK;YACJ8D,IAAI,EAAC,MAAM;YACXpB,KAAK,EAAE5B,UAAW;YAClB4G,QAAQ,EAAEnF,iBAAkB;YAC5BoF,WAAW,EAAC;UAA2B;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,eAEPvI,OAAA,CAACkB,eAAe;UAAAiH,QAAA,gBACdnI,OAAA;YAAAmI,QAAA,EAAI;UAAoB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EAC5B1I,SAAS,CAACmF,GAAG,CAACnC,QAAQ,iBACrB7C,OAAA;YAAAmI,QAAA,gBACEnI,OAAA;cAAAmI,QAAA,EAAItF,QAAQ,CAACI;YAAI;cAAAmF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACtBvI,OAAA,CAACoB,WAAW;cAACE,QAAQ,EAAEA,QAAQ,CAACuB,QAAQ,CAACI,IAAI,CAAC,IAAI;YAAE;cAAAmF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA,GAF/C1F,QAAQ,CAACI,IAAI;YAAAmF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGlB,CACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACa,CAAC,eAElBvI,OAAA;UAAAmI,QAAA,gBACEnI,OAAA,CAACwB,MAAM;YAACmH,OAAO,EAAEtC,mBAAoB;YAAA8B,QAAA,EAAC;UAAiB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAChEvI,OAAA,CAACwB,MAAM;YAACmH,OAAO,EAAEnC,oBAAqB;YAAA2B,QAAA,EAAC;UAAiB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACjEvI,OAAA;YACE6E,IAAI,EAAC,MAAM;YACX+D,MAAM,EAAC,OAAO;YACdH,QAAQ,EAAErB,oBAAqB;YAC/ByB,KAAK,EAAE;cAAEC,OAAO,EAAE;YAAO,CAAE;YAC3BC,EAAE,EAAC;UAAc;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClB,CAAC,eACFvI,OAAA,CAACwB,MAAM;YAACmH,OAAO,EAAEA,CAAA;cAAA,IAAAK,qBAAA;cAAA,QAAAA,qBAAA,GAAMlC,QAAQ,CAACmC,cAAc,CAAC,cAAc,CAAC,cAAAD,qBAAA,uBAAvCA,qBAAA,CAAyC9B,KAAK,CAAC,CAAC;YAAA,CAAC;YAAAiB,QAAA,EAAC;UAEzE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAEVvI,OAAA,CAACa,YAAY;QAAAsH,QAAA,eACXnI,OAAA,CAACF,SAAS;UACRoC,OAAO,EAAEA,OAAQ;UACjBH,cAAc,EAAEA;QAAe;UAAAqG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACU,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEnB;AAAC3G,EAAA,CA3LQD,GAAG;AAAAuH,GAAA,GAAHvH,GAAG;AA6LZ,eAAeA,GAAG;AAAC,IAAAvB,EAAA,EAAAG,GAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAI,GAAA,EAAAG,GAAA,EAAAwH,GAAA;AAAAC,YAAA,CAAA/I,EAAA;AAAA+I,YAAA,CAAA5I,GAAA;AAAA4I,YAAA,CAAAzI,GAAA;AAAAyI,YAAA,CAAAvI,GAAA;AAAAuI,YAAA,CAAArI,GAAA;AAAAqI,YAAA,CAAAlI,GAAA;AAAAkI,YAAA,CAAAhI,GAAA;AAAAgI,YAAA,CAAA5H,GAAA;AAAA4H,YAAA,CAAAzH,GAAA;AAAAyH,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}